@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body">
            <p>File name: @File?.Name.ToString()</p>

            <p>File type: @File?.Type.ToString()</p>

            <p>File Size: @File?.Size</p>
        </div>

        <div>
            @if (File == null)
            {
                <p><em>Loading...</em></p>
            }
            <EditForm Model=@File OnValidSubmit="UpdateFileName">
                <div class="form-group">
                    <label for="Name">Change file name</label>
                    <InputText @bind-Value=File.Name class="form-control" id="Name" />
                </div>
                <input type="submit" class="btn btn-primary" value="Save" />
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Datagrid datagrid;

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    [Parameter]
    public string? BodyText { get; set; }

    public File File { get; set; }

    public List<File> Files { get; set; }

    private string fileNameChange;

    public void Show(File file, List<File> files, string bodyText, string headerText = "")
    {
        HeaderText = headerText;
        BodyText = bodyText;
        IsVisible = true;
        StateHasChanged();
        File = file;
        Files = files;
    }

    private void Close()
    {
        HeaderText = string.Empty;
        BodyText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    public async Task UpdateFileName()
    {
        var file = Files.FirstOrDefault(file => file.Name == file.Name);

        file.Name = fileNameChange;
    }
}